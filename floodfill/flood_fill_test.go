package floodfill

import (
	"fmt"
	"reflect"
	"testing"
)

func TestFloodFill(t *testing.T) {

	for _, test := range []struct {
		Input     [][]int64
		FillValue int64
		FillX     int
		FillY     int
		Expected  [][]int64
	}{
		{
			Input: [][]int64{
				{5, 5, 5},
				{5, 0, 5},
				{5, 0, 5},
			},
			Expected: [][]int64{
				{5, 5, 5},
				{5, 4, 5},
				{5, 4, 5},
			},
			FillValue: 4,
			FillX:     1,
			FillY:     1,
		},
		{
			Input: [][]int64{
				{0, 5, 0},
				{5, 0, 5},
				{0, 5, 0},
			},
			Expected: [][]int64{
				{0, 5, 0},
				{5, 4, 5},
				{0, 5, 0},
			},
			FillValue: 4,
			FillX:     1,
			FillY:     1,
		},
		{
			Input: [][]int64{
				{0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
				{0, 1, 1, 1, 1, 0, 1, 0, 0, 0},
				{0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
			},
			Expected: [][]int64{
				{0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
				{0, 1, 1, 1, 1, 4, 1, 0, 0, 0},
				{0, 1, 4, 4, 4, 4, 1, 0, 0, 0},
				{0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
			},
			FillValue: 4,
			FillX:     2,
			FillY:     2,
		},
		{
			Input: [][]int64{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
				{0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 1, 1, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 1, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 1, 0, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 1, 0, 0, 1, 0},
				{0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			Expected: [][]int64{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 1, 1, 1, 1, 0, 0, 0, 0},
				{0, 1, 4, 4, 4, 4, 1, 0, 0, 0},
				{0, 1, 1, 4, 4, 4, 1, 0, 0, 0},
				{0, 0, 0, 1, 4, 4, 4, 1, 0, 0},
				{0, 0, 0, 1, 4, 4, 4, 4, 1, 0},
				{0, 0, 0, 0, 1, 4, 4, 4, 1, 0},
				{0, 0, 0, 0, 1, 4, 4, 4, 1, 0},
				{0, 0, 0, 0, 0, 1, 4, 4, 1, 0},
				{0, 0, 0, 0, 0, 0, 1, 1, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			FillValue: 4,
			FillX:     2,
			FillY:     2,
		},
		{
			Input: [][]int64{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 1, 0, 0, 0, 1, 1, 0, 0},
				{0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
				{0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
				{0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 1, 0, 0, 1, 0, 1, 1, 0},
				{0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
				{0, 0, 1, 0, 0, 1, 1, 0, 0, 1},
				{0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
				{0, 0, 0, 1, 1, 1, 1, 1, 0, 0},
			},
			Expected: [][]int64{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 1, 1, 0, 0, 0, 1, 1, 0, 0},
				{0, 1, 9, 1, 0, 1, 9, 1, 0, 0},
				{0, 1, 9, 9, 1, 9, 9, 1, 0, 0},
				{0, 1, 9, 9, 9, 9, 1, 0, 0, 0},
				{0, 0, 1, 9, 9, 1, 0, 1, 1, 0},
				{0, 0, 1, 9, 1, 0, 0, 1, 9, 1},
				{0, 0, 1, 9, 9, 1, 1, 9, 9, 1},
				{0, 0, 0, 1, 9, 9, 9, 9, 1, 0},
				{0, 0, 0, 1, 1, 1, 1, 1, 0, 0},
			},
			FillValue: 9,
			FillX:     4,
			FillY:     5,
		},
		{
			Input: [][]int64{
				{1, 0, 0, 0, 1, 1, 0, 0, 0, 1},
				{1, 0, 1, 0, 0, 1, 0, 1, 0, 1},
				{1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
			},
			Expected: [][]int64{
				{1, 9, 9, 9, 1, 1, 9, 9, 9, 1},
				{1, 9, 1, 9, 9, 1, 9, 1, 9, 1},
				{1, 1, 1, 1, 9, 9, 9, 1, 1, 1},
			},
			FillValue: 9,
			FillX:     1,
			FillY:     0,
		},
	} {

		out := FloodFill(
			test.Input,
			test.FillValue,
			test.FillX,
			test.FillY,
		)

		if !reflect.DeepEqual(out, test.Expected) {
			t.Errorf("Fill %s does not match expected %s", formatFill(out), formatFill(test.Expected))
		}
	}
}

func formatFill(in [][]int64) string {
	str := "\n"
	for j := 0; j < len(in); j++ {
		for i := 0; i < len(in[j]); i++ {
			str += fmt.Sprintf(" %d ", in[j][i])
		}
		str += "\n"
	}
	return str
}

// Benchmarks filling
func BenchmarkFill10x10(b *testing.B) {
	for i := 0; i < b.N; i++ {
		FloodFill([][]int64{
			{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			{0, 1, 1, 0, 0, 0, 1, 1, 0, 0},
			{0, 1, 0, 1, 0, 1, 0, 1, 0, 0},
			{0, 1, 0, 0, 1, 0, 0, 1, 0, 0},
			{0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
			{0, 0, 1, 0, 0, 1, 0, 1, 1, 0},
			{0, 0, 1, 0, 1, 0, 0, 1, 0, 1},
			{0, 0, 1, 0, 0, 1, 1, 0, 0, 1},
			{0, 0, 0, 1, 0, 0, 0, 0, 1, 0},
			{0, 0, 0, 1, 1, 1, 1, 1, 0, 0},
		}, 9, 4, 5)
	}
}
